package KorttiRekisteri.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import KorttiRekisteri.*;
// Generated by ComTest END
import fxPankki.Debit;

/**
 * Test class made by ComTest
 * @version 2025.04.16 20:51:35 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class DebitTest {


  // Generated by ComTest BEGIN
  /** 
   * testClone57 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone57() throws CloneNotSupportedException {    // Debit: 57
    Debit deb = new Debit(); 
    deb.vastaaDebit(1); 
    Debit kopio = deb.clone(); 
    assertEquals("From: Debit line: 62", deb.toString(), kopio.toString()); 
    deb.vastaaDebit(2); 
    assertEquals("From: Debit line: 64", false, kopio.toString().equals(deb.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString102 */
  @Test
  public void testToString102() {    // Debit: 102
    Debit deb = new Debit(); 
    deb.vastaaDebit(1); 
    assertEquals("From: Debit line: 105", "0|1|Debit|1.1.2025|4000 0000 0000 0001|1234|420|true|FI41 0000 0000 0000 00|2023", deb.toString()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse127 */
  @Test
  public void testParse127() {    // Debit: 127
    Debit deb = new Debit(); 
    deb.parse(" 2 | 10 | Debit | 1.1.2025 | 4000 0000 0000 0001 | 1234 | 420 | true | FI41 0000 0000 0000 00 | 2023"); 
    assertEquals("From: Debit line: 130", 10, deb.getAsiakasNro()); 
    assertEquals("From: Debit line: 131", "2|10|Debit|1.1.2025|4000 0000 0000 0001|1234|420|true|FI41 0000 0000 0000 00|2023", deb.toString()); 
    deb.rekisteroi(); 
    int n = deb.getTunnusNro(); 
    deb.parse("" + (n+20)); 
    deb.rekisteroi(); 
    assertEquals("From: Debit line: 136", n+20+1, deb.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi182 */
  @Test
  public void testRekisteroi182() {    // Debit: 182
    Debit pitsi1 = new Debit(); 
    assertEquals("From: Debit line: 184", 0, pitsi1.getTunnusNro()); 
    pitsi1.rekisteroi(); 
    Debit pitsi2 = new Debit(); 
    pitsi2.rekisteroi(); 
    int n1 = pitsi1.getTunnusNro(); 
    int n2 = pitsi2.getTunnusNro(); 
    assertEquals("From: Debit line: 190", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnna243 */
  @Test
  public void testAnna243() {    // Debit: 243
    Debit deb = new Debit(); 
    
    deb.aseta(0, "2");
    deb.aseta(1, "10");
    deb.aseta(2, "Debit");
    deb.aseta(3, "1.1.2025");
    deb.aseta(4, "4000 0000 0000 0001");
    deb.aseta(5, "1234");
    deb.aseta(6, "420");
    deb.aseta(7, "true");
    deb.aseta(8, "FI41 0000 0000 0000 00");
    deb.aseta(9, "2023");
    
    assertEquals("From: Debit line: 256", "2", deb.anna(0)); 
    assertEquals("From: Debit line: 257", "10", deb.anna(1)); 
    assertEquals("From: Debit line: 258", "Debit", deb.anna(2)); 
    assertEquals("From: Debit line: 259", "1.1.2025", deb.anna(3)); 
    assertEquals("From: Debit line: 260", "4000 0000 0000 0001", deb.anna(4)); 
    assertEquals("From: Debit line: 261", "1234", deb.anna(5)); 
    assertEquals("From: Debit line: 262", "420", deb.anna(6)); 
    assertEquals("From: Debit line: 263", "true", deb.anna(7)); 
    assertEquals("From: Debit line: 264", "FI41 0000 0000 0000 00", deb.anna(8)); 
    assertEquals("From: Debit line: 265", "2023", deb.anna(9)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAseta333 */
  @Test
  public void testAseta333() {    // Debit: 333
    Debit deb = new Debit(); 
    assertEquals("From: Debit line: 335", null, deb.aseta(3, "1.1.2025")); 
    deb.aseta(3, "kissa"); 
    assertEquals("From: Debit line: 337", null, deb.aseta(2, "MikÃ¤ tahansa")); 
  } // Generated by ComTest END
}