package KorttiRekisteri.test;
// Generated by ComTest BEGIN
import KorttiRekisteri.SailoException;
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import KorttiRekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2025.04.16 21:24:26 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class PankkiTest {

  // Generated by ComTest BEGIN  // Pankki: 19
   private Pankki pankki; 
   private Asiakas aku1; 
   private Asiakas aku2; 
   private int jid1; 
   private int jid2; 
   private Debit pitsi21; 
   private Credit pitsi11; 
   private Yhdistelmä pitsi22; 
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista46 */
  @Test
  public void testPoista46() {    // Pankki: 46
    assertEquals("From: Pankki line: 47", 2, pankki.etsi("*",0).size()); 
    assertEquals("From: Pankki line: 48", 2, pankki.annaDebit(aku1).size()); 
    assertEquals("From: Pankki line: 49", 1, pankki.poista(aku1)); 
    assertEquals("From: Pankki line: 50", 1, pankki.etsi("*",0).size()); 
    assertEquals("From: Pankki line: 51", 0, pankki.annaDebit(aku1).size()); 
    assertEquals("From: Pankki line: 52", 3, pankki.annaDebit(aku2).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaDebit66 */
  @Test
  public void testPoistaDebit66() {    // Pankki: 66
    assertEquals("From: Pankki line: 67", 2, pankki.annaDebit(aku1).size()); 
    pankki.poistaDebit(pitsi21); 
    assertEquals("From: Pankki line: 69", 1, pankki.annaDebit(aku1).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaCredit78 */
  @Test
  public void testPoistaCredit78() {    // Pankki: 78
    assertEquals("From: Pankki line: 79", 2, pankki.annaCredit(aku1).size()); 
    pankki.poistaCredit(pitsi11); 
    assertEquals("From: Pankki line: 81", 1, pankki.annaCredit(aku1).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaYhdistelma90 */
  @Test
  public void testPoistaYhdistelma90() {    // Pankki: 90
    assertEquals("From: Pankki line: 91", 2, pankki.annaYhdistelma(aku1).size()); 
    pankki.poistaYhdistelma(pitsi22); 
    assertEquals("From: Pankki line: 93", 1, pankki.annaYhdistelma(aku1).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa103 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa103() throws SailoException {    // Pankki: 103
    assertEquals("From: Pankki line: 105", 2, pankki.etsi("*",0).size()); 
    pankki.korvaaTaiLisaa(aku1); 
    assertEquals("From: Pankki line: 107", 2, pankki.etsi("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa153 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa153() throws SailoException {    // Pankki: 153
    assertEquals("From: Pankki line: 155", 2, pankki.etsi("*",0).size()); 
    pankki.lisaa(aku1); 
    assertEquals("From: Pankki line: 157", 3, pankki.etsi("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaDebit192 */
  @Test
  public void testAnnaDebit192() {    // Pankki: 192
    Asiakas aku3 = new Asiakas(); 
    aku3.rekisteroi(); 
    try {
        pankki.lisaa(aku3);
    } catch (KorttiRekisteri.SailoException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } 
    List<Debit> loytyneet; 
    loytyneet = pankki.annaDebit(aku3); 
    assertEquals("From: Pankki line: 200", 0, loytyneet.size()); 
    loytyneet = pankki.annaDebit(aku1); 
    assertEquals("From: Pankki line: 202", 2, loytyneet.size()); 
    assertEquals("From: Pankki line: 203", true, loytyneet.get(0) == pitsi21); 
    assertEquals("From: Pankki line: 204", true, loytyneet.get(1) == pitsi21); 
    loytyneet = pankki.annaDebit(aku2); 
    assertEquals("From: Pankki line: 206", 3, loytyneet.size()); 
    assertEquals("From: Pankki line: 207", true, loytyneet.get(0) == pitsi21); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaCredit218 */
  @Test
  public void testAnnaCredit218() {    // Pankki: 218
    Asiakas aku3 = new Asiakas(); 
    aku3.rekisteroi(); 
    try {
        pankki.lisaa(aku3);
    } catch (KorttiRekisteri.SailoException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } 
    List<Credit> loytyneet; 
    loytyneet = pankki.annaCredit(aku3); 
    assertEquals("From: Pankki line: 226", 0, loytyneet.size()); 
    loytyneet = pankki.annaCredit(aku1); 
    assertEquals("From: Pankki line: 228", 1, loytyneet.size()); 
    assertEquals("From: Pankki line: 229", true, loytyneet.get(0) == pitsi11); 
    loytyneet = pankki.annaCredit(aku2); 
    assertEquals("From: Pankki line: 231", 2, loytyneet.size()); 
    assertEquals("From: Pankki line: 232", true, loytyneet.get(0) == pitsi11); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaYhdistelma242 */
  @Test
  public void testAnnaYhdistelma242() {    // Pankki: 242
    Asiakas aku3 = new Asiakas(); 
    aku3.rekisteroi(); 
    try {
        pankki.lisaa(aku3);
    } catch (KorttiRekisteri.SailoException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } 
    List<Yhdistelmä> loytyneet; 
    loytyneet = pankki.annaYhdistelma(aku3); 
    assertEquals("From: Pankki line: 250", 0, loytyneet.size()); 
    loytyneet = pankki.annaYhdistelma(aku1); 
    assertEquals("From: Pankki line: 252", 1, loytyneet.size()); 
    assertEquals("From: Pankki line: 253", true, loytyneet.get(0) == pitsi22); 
    loytyneet = pankki.annaYhdistelma(aku2); 
    assertEquals("From: Pankki line: 255", 2, loytyneet.size()); 
    assertEquals("From: Pankki line: 256", true, loytyneet.get(1) == pitsi22); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta279 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta279() throws SailoException {    // Pankki: 279
    String hakemisto = "testipankki"; 
    File dir = new File(hakemisto); 
    File fAsiakkaat  = new File(hakemisto+"/asiakkaat.dat"); 
    File fKortit = new File(hakemisto+"/kortit.dat"); 
    dir.mkdir(); 
    fAsiakkaat.delete(); 
    fKortit.delete(); 
    pankki = new Pankki();  // tiedostoja ei ole, tulee poikkeus 
    try {
    pankki.lueTiedostosta(hakemisto); 
    fail("Pankki: 293 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    pankki.setTiedosto(hakemisto);  // nimi annettava koska uusi poisti sen
    pankki.tallenna(); 
    pankki = new Pankki(); 
    pankki.lueTiedostosta(hakemisto); 
    Collection<Asiakas> kaikki = pankki.etsi("", -1); 
    Iterator<Asiakas> it = kaikki.iterator(); 
    assertEquals("From: Pankki line: 303", aku1, it.next()); 
    assertEquals("From: Pankki line: 304", aku2, it.next()); 
    assertEquals("From: Pankki line: 305", false, it.hasNext()); 
    List<Debit> loytyneet = pankki.annaDebit(aku1); 
    Iterator<Debit> ih = loytyneet.iterator(); 
    assertEquals("From: Pankki line: 308", pitsi11, ih.next()); 
    assertEquals("From: Pankki line: 309", pitsi11, ih.next()); 
    assertEquals("From: Pankki line: 310", false, ih.hasNext()); 
    pankki.lisaa(aku2); 
    pankki.lisaaDebit(pitsi21); 
    pankki.tallenna();  // tekee molemmista .bak
    assertEquals("From: Pankki line: 315", true, fAsiakkaat.delete()); 
    assertEquals("From: Pankki line: 316", true, fKortit.delete()); 
    File fbak = new File(hakemisto+"/asiakkaat.bak"); 
    File fcbak = new File(hakemisto+"/kortit.bak"); 
    assertEquals("From: Pankki line: 319", true, fbak.delete()); 
    assertEquals("From: Pankki line: 320", true, fcbak.delete()); 
    assertEquals("From: Pankki line: 321", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi405 */
  @Test
  public void testEtsi405() {    // Pankki: 405
    Asiakas asiakas3 = new Asiakas(); asiakas3.rekisteroi(); 
    asiakas3.aseta(1,"Susi Sepe"); 
    try {
        pankki.lisaa(asiakas3);
    } catch (KorttiRekisteri.SailoException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } 
    Collection<Asiakas> loytyneet = pankki.etsi("*Susi*", 1); 
    assertEquals("From: Pankki line: 411", 1, loytyneet.size()); 
    Iterator<Asiakas> it = loytyneet.iterator(); 
    assertEquals("From: Pankki line: 413", true, it.next() == asiakas3); 
  } // Generated by ComTest END
}