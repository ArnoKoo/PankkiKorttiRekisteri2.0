package fxPankki.test;
// Generated by ComTest BEGIN
import java.io.File;
import fxPankki.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

import KorttiRekisteri.SailoException;

/**
 * Test class made by ComTest
 * @version 2025.04.16 22:44:23 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class AsiakkaatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa47 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa47() throws SailoException {    // Asiakkaat: 47
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(); 
    assertEquals("From: Asiakkaat line: 51", 0, asiakkaat.getLkm()); 
    asiakkaat.lisaa(aku1); assertEquals("From: Asiakkaat line: 52", 1, asiakkaat.getLkm()); 
    asiakkaat.lisaa(aku2); assertEquals("From: Asiakkaat line: 53", 2, asiakkaat.getLkm()); 
    asiakkaat.lisaa(aku1); assertEquals("From: Asiakkaat line: 54", 3, asiakkaat.getLkm()); 
    Iterator<Asiakas> it = asiakkaat.iterator(); 
    assertEquals("From: Asiakkaat line: 56", aku1, it.next()); 
    assertEquals("From: Asiakkaat line: 57", aku2, it.next()); 
    assertEquals("From: Asiakkaat line: 58", aku1, it.next()); 
    asiakkaat.lisaa(aku1); assertEquals("From: Asiakkaat line: 59", 4, asiakkaat.getLkm()); 
    asiakkaat.lisaa(aku1); assertEquals("From: Asiakkaat line: 60", 5, asiakkaat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta90 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta90() throws SailoException {    // Asiakkaat: 90
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(); 
    aku1.vastaaErik(); 
    aku2.vastaaErik(); 
    String hakemisto = "testiPankki"; 
    String tiedNimi = hakemisto+"/kortit"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    asiakkaat.lueTiedostosta(tiedNimi); 
    fail("Asiakkaat: 104 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    asiakkaat.lisaa(aku1); 
    asiakkaat.lisaa(aku2); 
    asiakkaat.tallenna(); 
    asiakkaat = new Asiakkaat(); 
    asiakkaat.lueTiedostosta(tiedNimi); 
    Iterator<Asiakas> i = asiakkaat.iterator(); 
    assertEquals("From: Asiakkaat line: 111", aku1, i.next()); 
    assertEquals("From: Asiakkaat line: 112", aku2, i.next()); 
    assertEquals("From: Asiakkaat line: 113", false, i.hasNext()); 
    asiakkaat.lisaa(aku2); 
    asiakkaat.tallenna(); 
    assertEquals("From: Asiakkaat line: 116", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Asiakkaat line: 118", true, fbak.delete()); 
    assertEquals("From: Asiakkaat line: 119", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAsiakasIterator249 
   * @throws SailoException when error
   */
  @Test
  public void testAsiakasIterator249() throws SailoException {    // Asiakkaat: 249
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    asiakkaat.lisaa(aku1); 
    asiakkaat.lisaa(aku2); 
    asiakkaat.lisaa(aku1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Asiakas asiakas:asiakkaat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+asiakas.getTunnusNro()); 
    String tulos = " " + aku1.getTunnusNro() + " " + aku2.getTunnusNro() + " " + aku1.getTunnusNro(); 
    assertEquals("From: Asiakkaat line: 268", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Asiakas>  i=asiakkaat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Asiakas asiakas = i.next(); 
    ids.append(" "+ asiakas.getTunnusNro()); 
    }
    assertEquals("From: Asiakkaat line: 276", tulos, ids.toString()); 
    Iterator<Asiakas>  i=asiakkaat.iterator(); 
    assertEquals("From: Asiakkaat line: 279", true, i.next() == aku1); 
    assertEquals("From: Asiakkaat line: 280", true, i.next() == aku2); 
    assertEquals("From: Asiakkaat line: 281", true, i.next() == aku1); 
    try {
    i.next(); 
    fail("Asiakkaat: 283 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi354 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi354() throws SailoException {    // Asiakkaat: 354
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas jasen1 = new Asiakas(); jasen1.parse("1|Ankka Aku|030201-115H|Paratiisitie 13|"); 
    Asiakas jasen2 = new Asiakas(); jasen2.parse("2|Ankka Tupu||030552-123B|"); 
    Asiakas jasen3 = new Asiakas(); jasen3.parse("3|Susi Sepe|121237-121V||131313|Perämetsä"); 
    Asiakas jasen4 = new Asiakas(); jasen4.parse("4|Ankka Iines|030245-115V|Ankkakuja 9"); 
    Asiakas jasen5 = new Asiakas(); jasen5.parse("5|Ankka Roope|091007-408U|Ankkakuja 12"); 
    asiakkaat.lisaa(jasen1); asiakkaat.lisaa(jasen2); asiakkaat.lisaa(jasen3); asiakkaat.lisaa(jasen4); asiakkaat.lisaa(jasen5); 
    List<Asiakas> loytyneet; 
    loytyneet = (List<Asiakas>)asiakkaat.etsi("*s*",1); 
    assertEquals("From: Asiakkaat line: 365", 2, loytyneet.size()); 
    assertEquals("From: Asiakkaat line: 366", true, loytyneet.get(0) == jasen4); 
    assertEquals("From: Asiakkaat line: 367", true, loytyneet.get(1) == jasen3); 
    loytyneet = (List<Asiakas>)asiakkaat.etsi("*7-*",2); 
    assertEquals("From: Asiakkaat line: 370", 2, loytyneet.size()); 
    assertEquals("From: Asiakkaat line: 371", true, loytyneet.get(0) == jasen5); 
    assertEquals("From: Asiakkaat line: 372", true, loytyneet.get(1) == jasen3); 
    loytyneet = (List<Asiakas>)asiakkaat.etsi(null,-1); 
    assertEquals("From: Asiakkaat line: 375", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa395 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa395() throws SailoException,CloneNotSupportedException {    // Asiakkaat: 395
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    assertEquals("From: Asiakkaat line: 401", 0, asiakkaat.getLkm()); 
    asiakkaat.korvaaTaiLisaa(aku1); assertEquals("From: Asiakkaat line: 402", 1, asiakkaat.getLkm()); 
    asiakkaat.korvaaTaiLisaa(aku2); assertEquals("From: Asiakkaat line: 403", 2, asiakkaat.getLkm()); 
    Asiakas aku3 = aku1.clone(); 
    aku3.aseta(3,"kkk"); 
    Iterator<Asiakas> it = asiakkaat.iterator(); 
    assertEquals("From: Asiakkaat line: 407", true, it.next() == aku1); 
    asiakkaat.korvaaTaiLisaa(aku3); assertEquals("From: Asiakkaat line: 408", 2, asiakkaat.getLkm()); 
    it = asiakkaat.iterator(); 
    Asiakas j0 = it.next(); 
    assertEquals("From: Asiakkaat line: 411", aku3, j0); 
    assertEquals("From: Asiakkaat line: 412", true, j0 == aku3); 
    assertEquals("From: Asiakkaat line: 413", false, j0 == aku1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista432 
   * @throws SailoException when error
   */
  @Test
  public void testPoista432() throws SailoException {    // Asiakkaat: 432
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(), aku3 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    asiakkaat.lisaa(aku1); asiakkaat.lisaa(aku2); asiakkaat.lisaa(aku3); 
    assertEquals("From: Asiakkaat line: 439", 1, asiakkaat.poista(id1+1)); 
    assertEquals("From: Asiakkaat line: 440", 1, asiakkaat.poista(id1)); assertEquals("From: Asiakkaat line: 440", 1, asiakkaat.getLkm()); 
    assertEquals("From: Asiakkaat line: 441", 0, asiakkaat.poista(id1+3)); assertEquals("From: Asiakkaat line: 441", 1, asiakkaat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId460 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId460() throws SailoException {    // Asiakkaat: 460
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(), aku3 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    asiakkaat.lisaa(aku1); asiakkaat.lisaa(aku2); asiakkaat.lisaa(aku3); 
    assertEquals("From: Asiakkaat line: 467", 1, asiakkaat.etsiId(id1+1)); 
    assertEquals("From: Asiakkaat line: 468", 2, asiakkaat.etsiId(id1+2)); 
  } // Generated by ComTest END
}